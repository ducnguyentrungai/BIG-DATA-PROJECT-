# import json
# from kafka import KafkaProducer

# def load_to_kafka(data, topic: str, kafka_server: str = 'kafka:9092'):
#     print(f"üì§ Sending to Kafka topic '{topic}'...")
#     producer = KafkaProducer(
#         bootstrap_servers=kafka_server,
#         value_serializer=lambda x: json.dumps(x).encode('utf-8'),
#         request_timeout_ms=30000
#     )
#     for _, row in data.iterrows():
#         record = json.loads(json.dumps(row.to_dict(), default=str))
#         producer.send(topic, value=record)

#     producer.flush()
#     producer.close()
#     print(f"‚úÖ All data sent to Kafka topic '{topic}'")

import json
import pandas as pd
from kafka import KafkaProducer
from kafka.errors import KafkaError

# def load_to_kafka(data: pd.DataFrame, topic: str, kafka_server: str = 'kafka:9092'):
#     """
#     G·ª≠i d·ªØ li·ªáu t·ª´ pandas DataFrame l√™n Kafka topic, t·ª´ng d√≤ng l√† 1 message JSON.

#     Args:
#         data (pd.DataFrame): D·ªØ li·ªáu c·∫ßn g·ª≠i (m·ªói d√≤ng 1 record).
#         topic (str): T√™n Kafka topic ƒë√≠ch.
#         kafka_server (str): ƒê·ªãa ch·ªâ Kafka broker (m·∫∑c ƒë·ªãnh: kafka:9092).
#     """
#     print(f"üì§ B·∫Øt ƒë·∫ßu g·ª≠i d·ªØ li·ªáu ƒë·∫øn Kafka topic: '{topic}'")

#     # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
#     if data is None or data.empty:
#         print("‚ö†Ô∏è DataFrame r·ªóng, kh√¥ng c√≥ g√¨ ƒë·ªÉ g·ª≠i.")
#         return

#     try:
#         # Kh·ªüi t·∫°o Kafka Producer
#         producer = KafkaProducer(
#             bootstrap_servers=kafka_server,
#             value_serializer=lambda x: json.dumps(x).encode('utf-8'),
#             retries=5,  # T·ª± ƒë·ªông th·ª≠ l·∫°i n·∫øu g·ª≠i l·ªói t·∫°m th·ªùi
#             linger_ms=10,  # G·ªôp nhi·ªÅu message nh·ªè
#             request_timeout_ms=30000
#         )

#         # G·ª≠i t·ª´ng d√≤ng d·ªØ li·ªáu l√™n Kafka
#         for i, (_, row) in enumerate(data.iterrows()):
#             try:
#                 # Chuy·ªÉn d√≤ng th√†nh JSON dict
#                 record = json.loads(json.dumps(row.to_dict(), default=str))

#                 # G·ª≠i l√™n Kafka
#                 future = producer.send(topic, value=record)

#                 # Tu·ª≥ ch·ªçn: x·ª≠ l√Ω k·∫øt qu·∫£ ph·∫£n h·ªìi (blocking)
#                 metadata = future.get(timeout=10)

#                 print(f"‚úÖ Record {i+1} sent: Partition={metadata.partition}, Offset={metadata.offset}")

#             except KafkaError as ke:
#                 print(f"‚ùå L·ªói g·ª≠i d√≤ng {i+1}: {ke}")
#             except Exception as e:
#                 print(f"‚ùå L·ªói kh√°c t·∫°i d√≤ng {i+1}: {e}")

#         # ƒê·∫£m b·∫£o t·∫•t c·∫£ message ƒë√£ ƒë∆∞·ª£c g·ª≠i
#         producer.flush()
#         print("‚úÖ ƒê√£ g·ª≠i to√†n b·ªô d·ªØ li·ªáu t·ªõi Kafka.")

#     except Exception as e:
#         print(f"‚ùå L·ªói k·∫øt n·ªëi Kafka ho·∫∑c kh·ªüi t·∫°o Producer: {e}")

#     finally:
#         try:
#             producer.close()
#         except Exception:
#             pass
def load_to_kafka(data: pd.DataFrame, topic: str, kafka_server: str = 'kafka:9092'):
    print(f"üì§ B·∫Øt ƒë·∫ßu g·ª≠i d·ªØ li·ªáu ƒë·∫øn Kafka topic: '{topic}'")

    if data is None or data.empty:
        print("‚ö†Ô∏è DataFrame r·ªóng, kh√¥ng c√≥ g√¨ ƒë·ªÉ g·ª≠i.")
        return

    producer = None
    success_count = 0
    fail_count = 0

    try:
        producer = KafkaProducer(
            bootstrap_servers=kafka_server,
            value_serializer=lambda x: json.dumps(x).encode('utf-8'),
            retries=5,
            linger_ms=10,
            request_timeout_ms=30000
        )

        for i, (_, row) in enumerate(data.iterrows()):
            try:
                record = json.loads(json.dumps(row.to_dict(), default=str))
                future = producer.send(topic, value=record)
                metadata = future.get(timeout=10)
                print(f"‚úÖ Record {i+1} sent: Partition={metadata.partition}, Offset={metadata.offset}")
                success_count += 1
            except KafkaError as ke:
                print(f"‚ùå Kafka l·ªói d√≤ng {i+1}: {ke}")
                fail_count += 1
            except Exception as e:
                print(f"‚ùå L·ªói kh√°c d√≤ng {i+1}: {e}")
                fail_count += 1

        producer.flush()
        print(f"üì¶ G·ª≠i xong {success_count} record, th·∫•t b·∫°i {fail_count}")

    except Exception as e:
        print(f"‚ùå L·ªói Kafka Producer: {e}")

    finally:
        if producer is not None:
            try:
                producer.close()
            except Exception:
                pass
